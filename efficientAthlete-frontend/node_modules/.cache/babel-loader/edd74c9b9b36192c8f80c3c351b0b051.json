{"ast":null,"code":"import { initializeApp } from \"firebase/app\"; // Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDKqs2zl_2KN6NTJE3ISiQqinsW8-uc4TI\",\n  authDomain: \"ecse428-a311f.firebaseapp.com\",\n  projectId: \"ecse428-a311f\",\n  storageBucket: \"ecse428-a311f.appspot.com\",\n  messagingSenderId: \"647846550145\",\n  appId: \"1:647846550145:web:f59d1b0c1ebd4071f38b80\"\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig);\nvar storage = firebase.storage(); // We use this storageRef vairable to access firebase storage\n\nvar storageRef = storage.ref(); // Create a random string as a filename to use in firebase, we can also create an increasing int variable in the database to use it as a filename so that we can make the filenames unique\n\nvar fileName = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15); //String concatination for the path, We need to support multiple extensions! \n\nvar path = 'files' + '/' + fileName + '.dcm'; // Pointer to our created fileName\n\nvar fileRef = storageRef.child(path); // Method for sending a file to firease storage (If we want, we can change the method's signature to support a filename parameter etc..)\n// In this method I implemented it using File interface https://developer.mozilla.org/en-US/docs/Web/API/File we can also use Blob, byte array, etc.\n\nexport function sendFileToFirebase(file) {\n  var task = fileRef.put(file); // Here we listen for multiple state changes and act based on the result\n\n  task.on(firebase.storage.TaskEvent.STATE_CHANGED, snapshot => {\n    // Get the progress by the number of bytes uploaded and the total number of bytes to be uploaded\n    var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n    console.log('Upload is ' + progress + '% done');\n\n    switch (snapshot.state) {\n      case firebase.storage.TaskState.PAUSED:\n        console.log('Upload is paused');\n        break;\n\n      case firebase.storage.TaskState.RUNNING:\n        console.log('Upload is running');\n        break;\n    }\n  }, error => {\n    console.log(error.code);\n  }, () => {\n    // Upload completed successfully, now we can get the download URL\n    task.snapshot.ref.getDownloadURL().then(downloadURL => {\n      console.log('File is successfully uploaded to: ', downloadURL);\n    });\n  });\n} // This method is for downloading a file from firebase storage, we need an argument as a path so that we can get the file. Also, we can turn the file into image if needed.\n//fullPath is the path of a file in firebase storage such as files / asd.jpg\n\nexport function getFileFromFirebase(fullPath) {\n  storageRef.child(fullPath).getDownloadURL().then(url => {\n    // This can be downloaded directly:\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'blob'; // We get the data with blob here instead of File\n\n    xhr.onload = event => {\n      var blob = xhr.response;\n    };\n\n    xhr.open('GET', url);\n    xhr.send(); // With .send() we can change the contents of the page without distrupting user and without reloading the page\n    // We can turn it into image as well if needed\n    // var img = document.getElementById('patientImg');\n    //  img.setAttribute('src', url);\n  }).catch(error => {\n    console.log(error);\n  });\n}","map":{"version":3,"sources":["C:/Users/farou/Desktop/web_dev/RB-Web/rapidbrachymctps-frontend/src/services/firebaseStorage.service.js"],"names":["initializeApp","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","storage","firebase","storageRef","ref","fileName","Math","random","toString","substring","path","fileRef","child","sendFileToFirebase","file","task","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","console","log","state","TaskState","PAUSED","RUNNING","error","code","getDownloadURL","then","downloadURL","getFileFromFirebase","fullPath","url","xhr","XMLHttpRequest","responseType","onload","event","blob","response","open","send","catch"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\n\r\n// Firebase configuration\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDKqs2zl_2KN6NTJE3ISiQqinsW8-uc4TI\",\r\n    authDomain: \"ecse428-a311f.firebaseapp.com\",\r\n    projectId: \"ecse428-a311f\",\r\n    storageBucket: \"ecse428-a311f.appspot.com\",\r\n    messagingSenderId: \"647846550145\",\r\n    appId: \"1:647846550145:web:f59d1b0c1ebd4071f38b80\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nvar storage = firebase.storage();\r\n\r\n// We use this storageRef vairable to access firebase storage\r\nvar storageRef = storage.ref();\r\n\r\n// Create a random string as a filename to use in firebase, we can also create an increasing int variable in the database to use it as a filename so that we can make the filenames unique\r\nvar fileName = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n\r\n//String concatination for the path, We need to support multiple extensions! \r\n\r\nvar path = 'files' + '/' + fileName + '.dcm';\r\n\r\n// Pointer to our created fileName\r\nvar fileRef = storageRef.child(path);\r\n\r\n// Method for sending a file to firease storage (If we want, we can change the method's signature to support a filename parameter etc..)\r\n// In this method I implemented it using File interface https://developer.mozilla.org/en-US/docs/Web/API/File we can also use Blob, byte array, etc.\r\n\r\nexport function sendFileToFirebase(file) {\r\n\r\n    var task = fileRef.put(file);\r\n\r\n    // Here we listen for multiple state changes and act based on the result\r\n    task.on(firebase.storage.TaskEvent.STATE_CHANGED, \r\n        (snapshot) => {\r\n            // Get the progress by the number of bytes uploaded and the total number of bytes to be uploaded\r\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log('Upload is ' + progress + '% done');\r\n            switch (snapshot.state) {\r\n                case firebase.storage.TaskState.PAUSED:\r\n                    console.log('Upload is paused');\r\n                    break;\r\n                case firebase.storage.TaskState.RUNNING: \r\n                    console.log('Upload is running');\r\n                    break;\r\n            }\r\n        },\r\n        (error) => {\r\n            console.log(error.code);\r\n        },\r\n        () => {\r\n            // Upload completed successfully, now we can get the download URL\r\n            task.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n                console.log('File is successfully uploaded to: ', downloadURL);\r\n            });\r\n        }\r\n    );\r\n}\r\n\r\n// This method is for downloading a file from firebase storage, we need an argument as a path so that we can get the file. Also, we can turn the file into image if needed.\r\n//fullPath is the path of a file in firebase storage such as files / asd.jpg\r\nexport function getFileFromFirebase(fullPath) {\r\n    storageRef.child(fullPath).getDownloadURL()\r\n        .then((url) => {\r\n            // This can be downloaded directly:\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.responseType = 'blob'; // We get the data with blob here instead of File\r\n            xhr.onload = (event) => {\r\n                var blob = xhr.response;\r\n            };\r\n            xhr.open('GET', url);\r\n            xhr.send(); // With .send() we can change the contents of the page without distrupting user and without reloading the page\r\n\r\n            // We can turn it into image as well if needed\r\n           // var img = document.getElementById('patientImg');\r\n          //  img.setAttribute('src', url);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n\r\n}"]},"metadata":{},"sourceType":"module"}