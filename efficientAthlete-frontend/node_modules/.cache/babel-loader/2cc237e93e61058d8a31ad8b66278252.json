{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\farou\\\\Desktop\\\\web_dev\\\\hci\\\\efficientAthlete-frontend\\\\src\\\\components\\\\AudioPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudioControls\";\nimport Backdrop from \"./Backdrop\";\nimport \"./styling/audio.css\";\n/*\r\n * Read the blog post here:\r\n * https://letsbuildui.dev/articles/building-an-audio-player-with-react-hooks\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioPlayer = ({\n  tracks\n}) => {\n  _s();\n\n  // State\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false); // Destructure for conciseness\n\n  const {\n    title,\n    color,\n    audioSrc\n  } = tracks[trackIndex]; // Refs\n\n  const audioRef = useRef(new Audio(audioSrc));\n  const intervalRef = useRef();\n  const isReady = useRef(false); // Destructure for conciseness\n\n  const {\n    duration\n  } = audioRef.current;\n  const currentPercentage = duration ? `${trackProgress / duration * 100}%` : \"0%\";\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n  `;\n\n  const startTimer = () => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextTrack();\n      } else {\n        setTrackProgress(audioRef.current.currentTime);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = value => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    setTrackProgress(audioRef.current.currentTime);\n  };\n\n  const onScrubEnd = () => {\n    // If not already playing, start\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  const toPrevTrack = () => {\n    if (trackIndex - 1 < 0) {\n      setTrackIndex(tracks.length - 1);\n    } else {\n      setTrackIndex(trackIndex - 1);\n    }\n  };\n\n  const toNextTrack = () => {\n    if (trackIndex < tracks.length - 1) {\n      setTrackIndex(trackIndex + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]); // Handles cleanup and setup when changing tracks\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(audioSrc);\n    setTrackProgress(audioRef.current.currentTime);\n\n    if (isReady.current) {\n      audioRef.current.play();\n      setIsPlaying(true);\n      startTimer();\n    } else {\n      // Set the isReady ref as true for the next pass\n      isReady.current = true;\n    }\n  }, [trackIndex]);\n  useEffect(() => {\n    // Pause and clean up on unmount\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n        isPlaying: isPlaying,\n        onPrevClick: toPrevTrack,\n        onNextClick: toNextTrack,\n        onPlayPauseClick: setIsPlaying\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        value: trackProgress,\n        step: \"1\",\n        min: \"0\",\n        max: duration ? duration : `${duration}`,\n        className: \"progress\",\n        onChange: e => onScrub(e.target.value),\n        onMouseUp: onScrubEnd,\n        onKeyUp: onScrubEnd,\n        style: {\n          background: trackStyling\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Backdrop, {\n      trackIndex: trackIndex,\n      activeColor: color,\n      isPlaying: isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AudioPlayer, \"E9Pm1fLhcuO8D0WYi7gJIZx8ngQ=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["C:/Users/farou/Desktop/web_dev/hci/efficientAthlete-frontend/src/components/AudioPlayer.jsx"],"names":["React","useState","useEffect","useRef","AudioControls","Backdrop","AudioPlayer","tracks","trackIndex","setTrackIndex","trackProgress","setTrackProgress","isPlaying","setIsPlaying","title","color","audioSrc","audioRef","Audio","intervalRef","isReady","duration","current","currentPercentage","trackStyling","startTimer","clearInterval","setInterval","ended","toNextTrack","currentTime","onScrub","value","onScrubEnd","toPrevTrack","length","play","pause","e","target","background"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport AudioControls from \"./AudioControls\";\r\nimport Backdrop from \"./Backdrop\";\r\nimport \"./styling/audio.css\";\r\n\r\n/*\r\n * Read the blog post here:\r\n * https://letsbuildui.dev/articles/building-an-audio-player-with-react-hooks\r\n */\r\nconst AudioPlayer = ({ tracks }) => {\r\n  // State\r\n  const [trackIndex, setTrackIndex] = useState(0);\r\n  const [trackProgress, setTrackProgress] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  // Destructure for conciseness\r\n  const { title, color, audioSrc } = tracks[trackIndex];\r\n\r\n  // Refs\r\n  const audioRef = useRef(new Audio(audioSrc));\r\n  const intervalRef = useRef();\r\n  const isReady = useRef(false);\r\n\r\n  // Destructure for conciseness\r\n  const { duration } = audioRef.current;\r\n\r\n  const currentPercentage = duration\r\n    ? `${(trackProgress / duration) * 100}%`\r\n    : \"0%\";\r\n  const trackStyling = `\r\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\r\n  `;\r\n\r\n  const startTimer = () => {\r\n    // Clear any timers already running\r\n    clearInterval(intervalRef.current);\r\n\r\n    intervalRef.current = setInterval(() => {\r\n      if (audioRef.current.ended) {\r\n        toNextTrack();\r\n      } else {\r\n        setTrackProgress(audioRef.current.currentTime);\r\n      }\r\n    }, [1000]);\r\n  };\r\n\r\n  const onScrub = (value) => {\r\n    // Clear any timers already running\r\n    clearInterval(intervalRef.current);\r\n    audioRef.current.currentTime = value;\r\n    setTrackProgress(audioRef.current.currentTime);\r\n  };\r\n\r\n  const onScrubEnd = () => {\r\n    // If not already playing, start\r\n    if (!isPlaying) {\r\n      setIsPlaying(true);\r\n    }\r\n    startTimer();\r\n  };\r\n\r\n  const toPrevTrack = () => {\r\n    if (trackIndex - 1 < 0) {\r\n      setTrackIndex(tracks.length - 1);\r\n    } else {\r\n      setTrackIndex(trackIndex - 1);\r\n    }\r\n  };\r\n\r\n  const toNextTrack = () => {\r\n    if (trackIndex < tracks.length - 1) {\r\n      setTrackIndex(trackIndex + 1);\r\n    } else {\r\n      setTrackIndex(0);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isPlaying) {\r\n      audioRef.current.play();\r\n      startTimer();\r\n    } else {\r\n      audioRef.current.pause();\r\n    }\r\n  }, [isPlaying]);\r\n\r\n  // Handles cleanup and setup when changing tracks\r\n  useEffect(() => {\r\n    audioRef.current.pause();\r\n\r\n    audioRef.current = new Audio(audioSrc);\r\n    setTrackProgress(audioRef.current.currentTime);\r\n\r\n    if (isReady.current) {\r\n      audioRef.current.play();\r\n      setIsPlaying(true);\r\n      startTimer();\r\n    } else {\r\n      // Set the isReady ref as true for the next pass\r\n      isReady.current = true;\r\n    }\r\n  }, [trackIndex]);\r\n\r\n  useEffect(() => {\r\n    // Pause and clean up on unmount\r\n    return () => {\r\n      audioRef.current.pause();\r\n      clearInterval(intervalRef.current);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"audio-player\">\r\n      <div className=\"track-info\">\r\n        <h2 className=\"title\">{title}</h2>\r\n\r\n        <AudioControls\r\n          isPlaying={isPlaying}\r\n          onPrevClick={toPrevTrack}\r\n          onNextClick={toNextTrack}\r\n          onPlayPauseClick={setIsPlaying}\r\n        />\r\n        <input\r\n          type=\"range\"\r\n          value={trackProgress}\r\n          step=\"1\"\r\n          min=\"0\"\r\n          max={duration ? duration : `${duration}`}\r\n          className=\"progress\"\r\n          onChange={(e) => onScrub(e.target.value)}\r\n          onMouseUp={onScrubEnd}\r\n          onKeyUp={onScrubEnd}\r\n          style={{ background: trackStyling }}\r\n        />\r\n      </div>\r\n      <Backdrop\r\n        trackIndex={trackIndex}\r\n        activeColor={color}\r\n        isPlaying={isPlaying}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioPlayer;\r\n"]},"metadata":{},"sourceType":"module"}