{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport { initializeApp } from \"firebase/app\";\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\"; // Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDKqs2zl_2KN6NTJE3ISiQqinsW8-uc4TI\",\n  authDomain: \"ecse428-a311f.firebaseapp.com\",\n  projectId: \"ecse428-a311f\",\n  storageBucket: \"ecse428-a311f.appspot.com\",\n  messagingSenderId: \"647846550145\",\n  appId: \"1:647846550145:web:f59d1b0c1ebd4071f38b80\"\n};\nconst firebaseApp = initializeApp(firebaseConfig); //const app = initializeApp(firebaseConfig);\n// We use this storageRef vairable to access firebase storage\n\nexport var storage = getStorage(firebaseApp);\nexport var storageRef = ref(storage); // Create a random string as a filename to use in firebase, we can also create an increasing int variable in the database to use it as a filename so that we can make the filenames unique\n\nexport var fileName = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15); //String concatination for the path, We need to support multiple extensions! \n\nexport var path = 'files' + '/' + fileName + '.dcm'; // Pointer to our created fileName\n\nexport const fileRef = ref(storage, path); // Method for sending a file to firease storage (If we want, we can change the method's signature to support a filename parameter etc..)\n// In this method I implemented it using File interface https://developer.mozilla.org/en-US/docs/Web/API/File we can also use Blob, byte array, etc.\n\nexport function sendFileToFirebase(file) {\n  const storage = getStorage();\n  const storageRef = ref(storage, path);\n  const uploadTask = uploadBytesResumable(storageRef, file); // Listen for state changes, errors, and completion of the upload.\n\n  uploadTask.on('state_changed', snapshot => {\n    const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n    console.log('Upload is ' + progress + '% done');\n\n    switch (snapshot.state) {\n      case 'paused':\n        console.log('Upload is paused');\n        break;\n\n      case 'running':\n        console.log('Upload is running');\n        break;\n    }\n  }, error => {\n    switch (error.code) {\n      case 'storage/unauthorized':\n        break;\n\n      case 'storage/canceled':\n        break;\n\n      case 'storage/unknown':\n        break;\n    }\n  }, () => {\n    getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n      console.log('File available at', downloadURL);\n    });\n  });\n  return uploadTask;\n} // This method is for downloading a file from firebase storage, we need an argument as a path so that we can get the file. Also, we can turn the file into image if needed.\n//fullPath is the path of a file in firebase storage such as files / asd.jpg\n\nexport function getFileFromFirebase(fullPath) {\n  const storage = getStorage();\n  getDownloadURL(ref(storage, fullPath)).then(url => {\n    // This can be downloaded directly:\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = 'blob';\n\n    xhr.onload = event => {\n      const blob = xhr.response;\n    };\n\n    const obj = xhr.open('GET', url);\n    console.log(obg);\n    xhr.send(); // Or inserted into an <img> element\n    //const img = document.getElementById('myimg');\n    // img.setAttribute('src', url);\n  }).catch(error => {\n    console.log(error); // Handle any errors\n  });\n}","map":{"version":3,"sources":["C:/Users/farou/Desktop/web_dev/RB-Web/rapidbrachymctps-frontend/src/services/firebaseStorage.service.js"],"names":["firebase","initializeApp","getStorage","ref","uploadBytesResumable","getDownloadURL","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","storage","storageRef","fileName","Math","random","toString","substring","path","fileRef","sendFileToFirebase","file","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","console","log","state","error","code","then","downloadURL","getFileFromFirebase","fullPath","url","xhr","XMLHttpRequest","responseType","onload","event","blob","response","obj","open","obg","send","catch"],"mappings":"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","sourcesContent":["import firebase from 'firebase/compat/app';\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\n\r\n\r\n\r\n\r\n// Firebase configuration\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDKqs2zl_2KN6NTJE3ISiQqinsW8-uc4TI\",\r\n    authDomain: \"ecse428-a311f.firebaseapp.com\",\r\n    projectId: \"ecse428-a311f\",\r\n    storageBucket: \"ecse428-a311f.appspot.com\",\r\n    messagingSenderId: \"647846550145\",\r\n    appId: \"1:647846550145:web:f59d1b0c1ebd4071f38b80\"\r\n  };\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\n  //const app = initializeApp(firebaseConfig);\r\n\r\n\r\n  \r\n// We use this storageRef vairable to access firebase storage\r\nexport var storage = getStorage(firebaseApp)\r\n\r\nexport var storageRef = ref(storage);\r\n// Create a random string as a filename to use in firebase, we can also create an increasing int variable in the database to use it as a filename so that we can make the filenames unique\r\nexport var fileName = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n\r\n//String concatination for the path, We need to support multiple extensions! \r\n\r\nexport var path = 'files' + '/' + fileName + '.dcm';\r\n\r\n// Pointer to our created fileName\r\nexport const fileRef = ref(storage, path);\r\n\r\n// Method for sending a file to firease storage (If we want, we can change the method's signature to support a filename parameter etc..)\r\n// In this method I implemented it using File interface https://developer.mozilla.org/en-US/docs/Web/API/File we can also use Blob, byte array, etc.\r\n\r\nexport function sendFileToFirebase(file) {\r\n\r\n    const storage = getStorage();\r\n\r\n    const storageRef = ref(storage, path);\r\n    const uploadTask = uploadBytesResumable(storageRef, file);\r\n\r\n    // Listen for state changes, errors, and completion of the upload.\r\n    uploadTask.on('state_changed',\r\n        (snapshot) => {\r\n            \r\n            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            console.log('Upload is ' + progress + '% done');\r\n            switch (snapshot.state) {\r\n                case 'paused':\r\n                    console.log('Upload is paused');\r\n                    break;\r\n                case 'running':\r\n                    console.log('Upload is running');\r\n                    break;\r\n            }\r\n            \r\n        },\r\n        (error) => {\r\n\r\n            switch (error.code) {\r\n                case 'storage/unauthorized':\r\n \r\n                    break;\r\n                case 'storage/canceled':\r\n\r\n                    break;\r\n\r\n                case 'storage/unknown':\r\n\r\n                    break;\r\n            }\r\n        },\r\n        () => {\r\n \r\n            getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                console.log('File available at', downloadURL);\r\n\r\n                \r\n            });\r\n        }\r\n    );\r\n    return uploadTask;\r\n\r\n}\r\n\r\n// This method is for downloading a file from firebase storage, we need an argument as a path so that we can get the file. Also, we can turn the file into image if needed.\r\n//fullPath is the path of a file in firebase storage such as files / asd.jpg\r\nexport function getFileFromFirebase(fullPath) {\r\n    const storage = getStorage();\r\n    getDownloadURL(ref(storage, fullPath))\r\n        .then((url) => {\r\n\r\n            // This can be downloaded directly:\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.responseType = 'blob';\r\n            xhr.onload = (event) => {\r\n                const blob = xhr.response;\r\n            };\r\n            const obj = xhr.open('GET', url);\r\n            console.log(obg)\r\n            xhr.send();\r\n\r\n            // Or inserted into an <img> element\r\n            //const img = document.getElementById('myimg');\r\n           // img.setAttribute('src', url);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n            // Handle any errors\r\n        });\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}